questions:
1) distinguish between having clause and where clause
2) distinguish between goup by clause and order by clause
3) distinguish between commit and rollback with example
4) what is the features of mysql
5) why mysql is more important as compared to other database languages
6) how to start mysql
7) under which database mysql is running
8) who is the owner of mysql
9) how to perfom crud in mysql
10) what is the difference between update and alter
11) what is the difference between create and insert
12) what is the use of limit give 5 example
13) how to change column name and table name
14) how many operators in mysql
15) where we use into
16) where we use on
17) what are the difference between all the joins with 5 example each    (matching)
18) what is the difference between order by group by and joins
19) what is the difference between union and joins 

answers:
1) distinguish between having and where clause:
   having:
   1) it is used to check condition
   2) having clause can be used with aggregate functions
   3) eg : select count(column_name), columname form table name group by columname having comumnname between 1 and 10;
   where:
   1) it is use to check condition
   2) where clause cannot be used with aggregate functions
   3) eg : select * from tablename where comumn_name=some_value;

2) distinguish between goup by clause and order by clause:
   order by : 1) it is used to print required data in ascending or descending order
              2) we can perform order by and group by together
	      3) eg: select * from tabel_name order by column_name
   group by : 1) it is used to print by group the data and filter out the repitative data and give the count as well
	      2) we can perform order by and group by together
	      3) eg: select count

3)

4) features of mysql:1) to store data in table form so we can get any data whenever required 
                     2) as mysql store data in database so whenever in a website we try to login we put in credentials and if the credentials match with the database data you get login 
		        access so it provides security as well
		     3) connect more set of tables with use of foreign key and primary key so we can access a lot of data in a connected manner
		     4) if we bymistakely make some mistake we can make use of set autocommit=off; and we can use rollback function to go back to the previous uncommited data to revert our 
		        mistakes
		     5) creation of view tables

5)

6) To start mysql:
   -first we need to start xampp
   -and then right click on the task bar, click on the task manager, goto services and search for mysql80 and stop the status which is    
    running
   -and now on xampp window just click on start button side of mysql after that click on shell button and in shell command line type mysql
    -u root to start the mysql on shell 
   -now you are ready to work on mysql by selecting the database you want to work on

7) mysql is running under mariadb database

8) oracle(2000-2022) is the owner of mysql

9) CRUD:
   create:to create a new database - create database database_name;
          to creata a new table - create table table_name(columnname data type);
          to insert data - insert into table_name values(values_to_be_inserted_as_per_the_columns data_type);
   read:to read data we use - select * from table_name;
        to read desired data we use - select column_name from table_name;
   update:to update data we use - update table_name set column_name=desired_data where column_name=desired_data;
          to update table name we use - alter table table_name rename new_table_name;
          to update column name - alter table table_name change old_column_name new_column_name data_type;
   delete:to delete a column - delete from table_name where column_name=data;
          to delete a tabel - drop table_name;
          to delete a database - drop database_name;

10)difference between update and alter:
   update:
   1) it is used to update a data present in the table 
   2) we cannot change the data_type of the column we can just update the data as per the data_type
   3) if we update the any row_data in view tabel it gets changed in the base table as well 
   alter:
   1) it is used to change the name of the database,table,column_name
   2) we can change the data_type of the column after the creation of the table
   3) if we change name of any column in view tabel it gets changed in the base table as well but if we change the tabel name in base tabel the view table shows you dodnt have rights to 
      use it

11)difference between create and insert:
   create:
   1) it is used to create a database,table
   2) it is used to create views tables as well 
   insert:
   1) it is used to insert data into the created table
   2) inserted data into view table gets changes into base table as well 

12) use of limit:
   1)it is used to print data in the sequence 
   2)with the help of limit we can fix the limit of the data we require
   3)we can also get the data in between the table but in sequence ie starting from this no and ending on this no
   examples:
   1) select * from table_name limit 5;  -  in this example 5 values will be shown 
   2) select * from table_name limit 2,3; -  in this example 3 values will be printed starting form 3rd value in the table
   3) use of limit with order by - select * from table_name limit 5 order by column_name; - it will print data in ascending order as per the column_data
   4) use of limit with order by desc - select * from table_name limit 5 order by column_name desc; - it will print data in descing order as per the column_data

13) to update table name we use - alter table table_name rename new_table_name;
    to update column name - alter table table_name change old_column_name new_column_name data_type;

14) operators in mysql
    1) and operator 2) or operator 3) not operator 4) like operator 5) in operator 6) between operator
    1) and operator eg: select * from table_name where column_name=some_value and column_name=some_value;
    2) or operator  eg: select * from table_name where column_name=some_value or some_value;
    3) not operator eg: select * from table_name where not column_name=some_value;
    4) like operator eg: 1] select * from table_name where column_name like "%some_value%"; 2]like "%some_value"; 3] like "some_value%";
    5) in operator eg: select * from table_name where column_name in("some_value","some_value","some_value");
    6) between operator eg: select * from table_name where column_name between some_value and some_value;

15) into - it is used to insert data into any table's column/row the code is as below:
    insert into table_name values(column_name data_type,column_name data_type);

16) on - it is used while performimg inner join,left join and right join
    for eg: select * from table1_name inner join table2_name on table1_name.column_name=table2_name.column_name;

17) there are 5 type of joins 
    1) inner join
    2) left join
    3) right join 
    4) cross join
    5) self join
    
    1) inner join : inner joins prints matiching data from both the tables
       Examples: 1) select * from table_1_name inner join table_2_name on table_1_name.column_name=table_2_name.column_name;
                    this will print matching data form table_1 and table_2
	         2) select * from table_1_name inner join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name right join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print matching data from table_1 and table_2 and below that it will print full data on right from table_3 and matching data from table 4
                 3) select * from table_1_name inner join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name left join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print matching data from table_1 and table_2 and below that it will print full data on left from table_3 and matching data from table 4
		 4) select * from table_1_name right join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name inner join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print full data on right from table_1 matching data from table_2 and below that it will print matching data from table_3 and table 4
		 5) select * from table_1_name inner join table_2_name;
		    it will print all the data form both the tables in total no of rows ie rows*rows data will be printed

    2) left join : left join prints all data in the left table and matiching data from the right table 
       Examples: 1) select * from table_1_name left join table_2_name on table_1_name.column_name=table_2_name.column_name;
		    this will print full data from the left side from table_1 and matching data in the right side from table_2
		 2) select * from table_1_name left join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name right join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all data from left side from table_1 and matching data from table_2 and below that it will print full data on right from table_3 and matching data from 
		    table 4 on left
                 3) select * from table_1_name right join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name left join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all data from right sider from table_1 and matching data form table_2 and below that it will print full data on left from table_3 and matching data from 
		    table 4 on right
		 4) select * from table_1_name left join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name inner join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print full data from left from table_1 and matching data from right from table 2 and below that it will print matching data from table_3 and table 4
		 5) select * from table_1_name left join table_2_name;
		    it will print all the data form both the tables in total no of rows ie rows*rows data will be printed
		 
    3) right join : right join prints all the data from the right table and matiching data from the left table
       Examples: 1) select * from table_1_name right join table_2_name on table_1_name.column_name=table_2_name.column_name;
		    this will print full data from the right side from table_1 and matching data in the left side from table_2
		 2) select * from table_1_name left join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name right join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all data from left side from table_1 and matching data from table_2 and below that it will print full data on right from table_3 and matching data from 
		    table 4 on left
		 3) select * from table_1_name right join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name left join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all data from right sider from table_1 and matching data form table_2 and below that it will print full data on left from table_3 and matching data from 
		    table 4 on right
		 4) select * from table_1_name right join table_2_name on table_1_name.column_name=table_2_name.column_name union select * from table_3_name inner join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print full data from right from table_1 and matching data on left from table 2 and below that it will print matching data from table_3 and table 4
		 5) select * from table_1_name right join table_2_name;
		    it will print all the data form both the tables in total no of rows ie rows*rows data will be printed

    4) cross join : cross joins prints matiching data from both the tables
       Examples: 1) select * from table_1_name cross join table_2_name where table_1_name.column_name=table_2_name.column_name;
		    this will print matching data form both the tables
		 2) select * from table_1_name cross join table_2_name where table_1_name.column_name=table_2_name.column_name union select * from table_3_name inner join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all matching data from tabel_1 and table_2 and below that it will print matching data from table_3 and table_4 
		 3) select * from table_1_name cross join table_2_name where table_1_name.column_name=table_2_name.column_name union select * from table_3_name left join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all matching data from table_1 and table_2 and below that it will print full data on left from table_3 and matching data from table 4 on right
		 4) select * from table_1_name cross join table_2_name where table_1_name.column_name=table_2_name.column_name union select * from table_3_name right join table_4_name on 
		    table_3_name.column_name=table_4_name.column_name;
		    this will print all matching data from table_1 and table_2 and below that it will print full data on right from table_3 and matching data from table 4 on left
		 5) select * from table_1_name cross join table_2_name;
		    it will print all the data form both the tables in total no of rows ie rows*rows data will be printed

    5) self join  : it will print all the data in total no of rows ie rows*rows data will be printed
       Example: select * from table_1 self join table_1 on table_1.column_name=table_1.column_name;
       it will print data in rows*rows formate as written above
       and if you write select * from table_1 self join table_1;  --  it will also give same result

18) difference bewteen order by, group by and joins:
    order by : 1) it is used to print required data in ascending or descending order
               2) we can perform order by and group by together
	       3) we can perform order by and joins together
	       4) there is only 1 type of order by
    group by : 1) it is used to group the data and filter out the repitative data and give the count as well
	       2) we can perform order by and group by together
	       3) we cannot perform group by and joins together
               4) there is only 1 type of group by
    joins    : 1) joins print data one side the other
               2) we can perform order by and joins together
               3) we cannot perform group by and joins together
               4) there are 5 types of joins

19) difference between union and joins:
    union : 1) union prints data in one below the other formate
            2) union may or maynot require primary and foreign key
	    3) there are no types in union
	    4) we can connect 2 or more joins with the help of union
    joins : 1) joins prints data one side the other
	    2) joins require primary and foreign key
            3) there are 5 types of joins 1) inner join 2) left join 3) right join 4) cross join 5) self join
            4) we can perform 1 join at a time


